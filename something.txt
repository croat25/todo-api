var express = require('express');
var bodyParser = require('body-parser');
var _ = require('underscore');
var db = require('./db.js');
var bcrypt = require("bcryptjs");
var app = express();
var PORT = process.env.PORT || 3000;
var todos = [];
var todoNextId = 1;

app.use(bodyParser.json());

app.get('/', function(req, res) {
	res.send('Todo API Root');
});

// GET /todos?completed=false&q=work
app.get('/todos', function(req, res) {


	var query = req.query;
	var where = {};

	if (query.hasOwnProperty('completed') && query.completed === 'true') {
		where.completed = true;
	} else if (query.hasOwnProperty('completed') && query.completed === 'false') {
		where.completed = false;
	}
	if (query.hasOwnProperty('q') && query.q.length > 0) {
		where.description = {
			$like: '%' + query.q + "%"
		};
	}

	db.todo.findAll({
			where: where
		}).then(function(todos) {
			res.json(todos);
		}, function(e) {
			res.status(500).send();
		})
		// var filteredTodos = todos;

	// if (queryParams.hasOwnProperty('completed') && queryParams.completed === 'true') {
	// 	filteredTodos = _.where(filteredTodos, {
	// 		completed: true
	// 	});
	// } else if (queryParams.hasOwnProperty('completed') && queryParams.completed === 'false') {
	// 	filteredTodos = _.where(filteredTodos, {
	// 		completed: false
	// 	});
	// }

	// if (queryParams.hasOwnProperty('q') && queryParams.q.length > 0) {
	// 	filteredTodos = _.filter(filteredTodos, function(todo) {
	// 		return todo.description.toLowerCase().indexOf(queryParams.q.toLowerCase()) > -1;
	// 	});
	// }

	// res.json(filteredTodos);
});

// GET /todos/:id
app.get('/todos/:id', function(req, res) {
	var todoId = parseInt(req.params.id, 10);

	db.todo.findById(todoId).then(function(todo) {
		if (!!todo) {
			res.json(todo.toJSON());
		} else {
			res.status(404).send();
		}
	}, function(e) {
		res.status(500).send();
	});
	// var matchedTodo = _.findWhere(todos, {
	// 	id: todoId
	// });

	// if (matchedTodo) {
	// 	res.json(matchedTodo);
	// } else {
	// 	res.status(404).send();
	// }
});

// POST /todos
app.post('/todos', function(req, res) {
	//pick wat attriubutes u want from body which is desciption and completed
	var body = _.pick(req.body, 'description', 'completed');
	//database of todo u gonna create a body then a function which passes todo
	// respond with a json and passed in paramete and change it to json
	db.todo.create(body).then(function(todo) {
		res.json(todo.toJSON());
	}, function(e) {
		res.status(400).json(e);
	});
	// call create on db.todo
	//   respond with 200 and todo
	//   res.status(400).json(e)

	// if (!_.isBoolean(body.completed) || !_.isString(body.description) || body.description.trim().length === 0) {
	// 	return res.status(400).send();
	// }

	// body.description = body.description.trim();
	// body.id = todoNextId++;

	// todos.push(body);

	// res.json(body);
});

app.post('/users',function(req,res){

	var body=_.pick(req.body,'email','password');
	db.user.create(body).then(function(user){
		res.json(user.toPublicJSON());
	},function(e){
		res.status(400).json(e);
	});
});

// POST /users/login
app.post('/users/login', function (req, res) {
	var body = _.pick(req.body, 'email', 'password');

	db.user.authenticate(body).then(function (user) {
		res.json(user.toPublicJSON());
	}, function () {
		res.status(401).send();
	});
});


// DELETE /todos/:id
app.delete('/todos/:id', function(req, res) {
	var todoId = parseInt(req.params.id, 10);
	db.todo.destroy({
		where: { //how to use destroy keyword identify were u wanna delete how u gonna
			//find the id and todoid is the parse int paramenter
			id: todoId
		}
	}).then(function(rowsdeleted) {
		if (rowsdeleted === 0) {
			res.status(404).json({
				error: 'no toddo with id'
			});
		} else {
			res.status(204).send();
		}

	}, function() {
		res.status(500).send();
	})

	// var matchedTodo = _.findWhere(todos, {
	// 	id: todoId
	// });

	// if (!matchedTodo) {
	// 	res.status(404).json({
	// 		"error": "no todo found with that id"
	// 	});
	// } else {
	// 	todos = _.without(todos, matchedTodo);
	// 	res.json(matchedTodo);
	// }
});

// PUT /todos/:id
app.put('/todos/:id', function(req, res) {
	var todoId = parseInt(req.params.id, 10);
	// var matchedTodo = _.findWhere(todos, {
	// 	id: todoId
	// });
	var body = _.pick(req.body, 'description', 'completed');
	var attributes = {};

	// if (!matchedTodo) {
	// 	return res.status(404).send();
	// }

	if (body.hasOwnProperty('completed') /*&& _.isBoolean(body.completed)*/ ) {
		attributes.completed = body.completed;
	} // else if (body.hasOwnProperty('completed')) {
	// 	return res.status(400).send();
	// }

	if (body.hasOwnProperty('description') /* && _.isString(body.description) && body.description.trim().length > 0*/ ) {
		attributes.description = body.description;
	} //else if (body.hasOwnProperty('description')) {
	// 	return res.status(400).send();
	// }
	db.todo.findById(todoId).then(function(todo) {

			///////////////////everything between here is for the findbyid clause
			if (todo) {
				return todo.update(attributes);
			} else {
				res.status(404).send();
			}

		}, function() {
			res.status(500).send();
		})
		////////////////belown this is for a todo.update goes poorly
		.then(function(todo) {
			res.json(todo.toJSON());
		}, function(e) {
			res.status(400).json(e);

		});
	// _.extend(matchedTodo, validAttributes);
	// res.json(matchedTodo);
});

db.sequelize.sync().then(function() {
	app.listen(PORT, function() {
		console.log('Express listening on port ' + PORT + '!');
	});
});